;;; ---------------------------------------------------------------------------
;;; A registrar that allocates subdomains to the first person to claim them.

(seq

  ;; --------------------------------------------------------------------------
  ;; INIT

  ;; Include macros.
  (include "macros.lll")

  ;; Set up initial state.
  (sstore contract-owner (caller))

  ;; --------------------------------------------------------------------------
  ;; CODE

  (returnlll
    (seq

      ;; ----------------------------------------------------------------------
      ;; Initialize the FIFS registrar.
      ;;
      ;; @param ens-address The address of the ENS registry.
      ;; @param node The node that this registrar administers.
      ;;
      ;; Signature: FIFSRegistrar(address,bytes32)

      (when (= function-id fifs-registrar)
        (seq only-owner

          ;; Define input parameters to this function.
          (def 'ens-address (calldataload 0x04))
          (def 'node (calldataload 0x24))

          ;; Set contract address and enable it.
          (sstore ens-registry ens-address)
          (sstore root-node node)

          ;; Stop here; nothing to return.
          (stop)))

      ;; ----------------------------------------------------------------------
      ;; Register a name, or change the owner of an existing registration.
      ;;
      ;; @param subnode The hash of the label to register.
      ;; @param owner The address of the new owner.
      ;;
      ;; Signature: register(bytes32,address)

      (when (= function-id register-name)
        (seq

          ;; Define input parameters to this function.
          (def 'subnode (calldataload 0x04))
          (def 'owner (calldataload 0x24))

          (mstore node-bytes @@root-node)
          (mstore label-bytes subnode)
          (mstore node-hash (sha3 node-bytes 32))

          ;; Call owner(bytes32).
          ;(mstore call-data (pad-right get-node-owner))
          ;(mstore (+ call-data 4) @node-hash)
          ;(mstore current-owner (call (- (gas) 1000) 0 @@ens-registry
          ;  call-data 36 return-data 32))

          ;;; Transfer ownership by storing passed-in address.
          ;(sstore (+ (get-record node) owner) new-owner)

          ;; Nothing to return.
          (stop)))

      ;; ----------------------------------------------------------------------
      ;; Fallback: No functions matched the function ID provided.

      (jump invalid-location)))

)
