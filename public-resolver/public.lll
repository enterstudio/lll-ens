;;; ---------------------------------------------------------------------------
;;; @title A public resolver; only allows the node's owner to set its address.
;;; @author Daniel Ellison <daniel@syrinx.net>

(seq

  ;; --------------------------------------------------------------------------
  ;; INIT

  ;; Bring in our macro definitions.
  (include "../stdlib.lll")
  (include "macros.lll")

  ;; Make sure we're working with the right library version.
  (when (!= stdlib-version required-stdlib)
    (jump invalid-location))

  ;; Store the constructor parameter.
  (codecopy scratch-one (bytecodesize) 32)
  (sstore ens-registry @scratch-one)

  ;; --------------------------------------------------------------------------
  ;; CODE

  (returnlll
    (seq

      ;; ----------------------------------------------------------------------
      ;; @notice Returns true if specified node has specified record type.
      ;; @dev Signature: has(bytes32,bytes32)
      ;; @param node The ENS node to query.
      ;; @param kind The record type name, as specified in EIP137.
      ;; @return True if this resolver has a record of the provided type on the
      ;;         provided node.

      (def 'node (calldataload 0x04))
      (def 'kind (calldataload 0x24))

      (function has-record-type
        (seq

          ;; Do the required comparison and store for return.
          (mstore call-result (&& (= kind "addr") (!= (get-address node) 0)))

          ;; Return boolean result.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Returns the address associated with an ENS node.
      ;; @dev Signature: addr(bytes32)
      ;; @param node The ENS node to query.
      ;; @return The associated address.

      (def 'node (calldataload 0x04))

      (function get-node-address
        (seq

          ;; Retrieve the node's address.
          (mstore call-result (get-address node))

          ;; If there's no stored address for this node, throw an exception.
          (when (= @call-result 0)
            (jump invalid-location))

          ;; Return result.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Sets the address associated with an ENS node. May only be
      ;;         called by the owner of that node in the ENS registry.
      ;; @dev Signature: setAddr(bytes32,address)
      ;; @param node The node to update.
      ;; @param addr The address to set.

      (def 'node (calldataload 0x04))
      (def 'addr (calldataload 0x24))

      (function set-node-address
        (seq (only-node-owner node)

          ;; Store the node's new address.
          (set-address node addr)

          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Fallback: No functions matched the function ID provided.

      (jump invalid-location)))

)
