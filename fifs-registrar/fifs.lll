;;; ---------------------------------------------------------------------------
;;; A registrar that allocates subdomains to the first person to claim them.

(seq

  ;; --------------------------------------------------------------------------
  ;; INIT

  ;; Include macros.
  (include "macros.lll")

  ;; Set up initial state.
  (sstore contract-owner (caller))

  ;; --------------------------------------------------------------------------
  ;; CODE

  (returnlll
    (seq

      ;; ----------------------------------------------------------------------
      ;; Initialize the FIFS registrar.
      ;;
      ;; @param ens-address The address of the ENS registry.
      ;; @param node The node that this registrar administers.
      ;;
      ;; Signature: FIFSRegistrar(address,bytes32)

      (when (= function-id fifs-registrar)
        (seq only-owner

          ;; Define input parameters to this function.
          (def 'ens-address (calldataload 0x04))
          (def 'node (calldataload 0x24))

          ;; Store the "constructor" parameters.
          (sstore ens-registry ens-address)
          (sstore root-node node)

          ;; Stop here; nothing to return.
          (stop)))

      ;; ----------------------------------------------------------------------
      ;; Register a name, or change the owner of an existing registration.
      ;;
      ;; @param subnode The hash of the label to register.
      ;; @param owner The address of the new owner.
      ;;
      ;; Signature: register(bytes32,address)

      (when (= function-id register-name)
        (seq (only-owner (calldataload 0x04))

          ;; Define input parameters to this function.
          (def 'subnode (calldataload 0x04))
          (def 'owner (calldataload 0x24))

          ;; Set up the call data.
          (mstore (+ call-data 0x00) (pad-right set-subnode-owner))
          (mstore (+ call-data 0x04) @@root-node)
          (mstore (+ call-data 0x24) subnode)
          (mstore (+ call-data 0x44) owner)

          ;; Call setSubnodeOwner(bytes32,bytes32,address). If the call failed,
          ;; throw an exception.
          (when (= (call (- (gas) 1000) 0 @@ens-registry
              call-data 100 return-data 32) false)
            (jump invalid-location))

          ;; Nothing to return.
          (stop)))

      ;; ----------------------------------------------------------------------
      ;; Fallback: No functions matched the function ID provided.

      (jump invalid-location)))

)
