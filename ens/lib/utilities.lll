;;; ---------------------------------------------------------------------------
;;; Library: Utilities

(seq

  ;; --------------------------------------------------------------------------
  ;; Extracts the four leftmost bytes of input.
  ;;
  ;; @param input A long number

  (def 'bytes4 (input)
    (div input (exp 2 224)))

  ;; --------------------------------------------------------------------------
  ;; Retrieves the requested function ID from the first four bytes of
  ;; the call data.

  (def 'function-id
    (bytes4 (calldataload 0x00)))

  ;; --------------------------------------------------------------------------
  ;; Calculates record location for node passed in.
  ;;
  ;; @param node Return the record location of this node.

  (def 'get-record (node)
      (+ records node))

  ;; --------------------------------------------------------------------------
  ;; Calculates record location for node and label passed in.
  ;;
  ;; @param node The parent node.
  ;; @param label The hash of the subnode label.

  (def 'get-record (node label)
    (seq
      (mstore node-bytes node)
      (mstore label-bytes label)
      (+ records (sha3 node-bytes 64))))

  ;; --------------------------------------------------------------------------
  ;; Retrieves owner from node record.
  ;;
  ;; @param node Get owner of this node.

  (def 'get-owner (node)
    (sload (+ (get-record node) owner)))

  ;; --------------------------------------------------------------------------
  ;; Retrieves resolver from node record.
  ;;
  ;; @param node Get resolver of this node.

  (def 'get-resolver (node)
    (sload (+ (get-record node) resolver)))

  ;; --------------------------------------------------------------------------
  ;; Check that the caller is the node owner.
  ;;
  ;; @param node Check owner of this node.

  (def 'only-node-owner (node)
    (when (!= (caller) (get-owner node))
      (jump invalid-location)))

)
