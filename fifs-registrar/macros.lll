;;; ---------------------------------------------------------------------------
;;; @title Macros for the FIFS registrar.
;;; @author Daniel Ellison <daniel@syrinx.net>

(seq

  ;; --------------------------------------------------------------------------
  ;; Constant definitions.

  ;; Booleans.
  (def 'true  1)
  (def 'false 0)

  ;; Memory.
  (def 'node-bytes  0x00)
  (def 'label-bytes 0x20)
  (def 'return-code 0x40)
  (def 'return-data 0x60)
  (def 'call-data   0x80)

  ;; Storage.
  (def 'contract-owner 0x00)
  (def 'ens-registry   0x01)
  (def 'root-node      0x02)

  ;; Precomputed function IDs.
  (def 'fifs-registrar    0x9d063ed8) ; FIFSRegistrar(address,bytes32)
  (def 'register-name     0xd22057a9) ; register(bytes32,address)
  (def 'get-node-owner    0x02571be3) ; owner(bytes32)
  (def 'set-subnode-owner 0x06ab5923) ; setSubnodeOwner(bytes32,bytes32,address)

  ;; Jumping here causes an EVM error.
  (def 'invalid-location 0x02)

  ;; --------------------------------------------------------------------------
  ;; @notice Extracts the four leftmost bytes of input.
  ;; @param input A long number.

  (def 'bytes4 (input)
    (div input (exp 2 224)))

  ;; --------------------------------------------------------------------------
  ;; @notice Pads the input so it's the leftmost four bytes of the result.
  ;; @param input A short hash.

  (def 'pad-right (input)
    (mul input (exp 2 224)))

  ;; --------------------------------------------------------------------------
  ;; @notice Retrieves function ID from the first four bytes of the call data.

  (def 'function-id
    (bytes4 (calldataload 0x00)))

  ;; --------------------------------------------------------------------------
  ;; @notice Checks that the caller is the contract owner.

  (def 'only-owner
    (when (!= (caller) @@contract-owner)
      (jump invalid-location)))

  ;; --------------------------------------------------------------------------
  ;; @notice Checks that the caller is the subnode owner.
  ;; @param subnode Check owner of this subnode.

  (def 'only-owner (subnode)
    (seq

      ;; Store the components of the node for upcoming sha3.
      (mstore node-bytes @@root-node)
      (mstore label-bytes subnode)

      ;; Set up the call data.
      (mstore (+ call-data 0x00) (pad-right get-node-owner))
      (mstore (+ call-data 0x04) (sha3 node-bytes 32))

      ;; Call owner(bytes32).
      (mstore return-code (call (- (gas) 1000) 0 @@ens-registry
          call-data 36 return-data 32))

      ;; If the call failed or the caller isn't the current subnode owner,
      ;; throw an exception.
      (when (or (= @return-code false) (!= @return-data (caller)))
        (jump invalid-location))))

)
