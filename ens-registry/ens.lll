;;; ---------------------------------------------------------------------------
;;; @title The Ethereum Name Service registry.
;;; @author Daniel Ellison <daniel@syrinx.net>

(seq

  ;; --------------------------------------------------------------------------
  ;; INIT

  (include "macros.lll")
  (sstore contract-owner (caller))

  ;; --------------------------------------------------------------------------
  ;; CODE

  (returnlll
    (seq

      ;; ----------------------------------------------------------------------
      ;; @notice Initializes the ENS registry.
      ;; @dev ENS(address)
      ;; @param root-owner Address of the root node owner.

      (when (= function-id ens-registry)
        (seq only-owner

          ;; Define input parameters to this function.
          (def 'root-owner (calldataload 0x04))

          ;; Set ownership of root node by storing passed-in address.
          (sstore (+ records owner) root-owner)

          ;; Nothing to return.
          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Returns the address that owns the specified node.
      ;; @dev owner(bytes32)
      ;; @param node Return this node's owner.

      (when (= function-id get-node-owner)
        (seq

          ;; Define input parameters to this function.
          (def 'node (calldataload 0x04))

          ;; Get the node's owner and save it.
          (mstore call-result (get-owner node))

          ;; Return result.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Returns the address of the resolver for the specified node.
      ;; @dev resolver(bytes32)
      ;; @param node Return this node's resolver.

      (when (= function-id get-node-resolver)
        (seq

          ;; Define input parameters to this function.
          (def 'node (calldataload 0x04))

          ;; Get the node's resolver and save it.
          (mstore call-result (get-resolver node))

          ;; Return result.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Transfers ownership of a node to a new address. May only be
      ;;         called by the current owner of the node.
      ;; @dev setOwner(bytes32,address)
      ;; @param node The node to transfer ownership of.
      ;; @param new-owner The address of the new owner.

      (when (= function-id set-node-owner)
        (seq (only-owner (calldataload 0x04))

          ;; Define input parameters to this function.
          (def 'node (calldataload 0x04))
          (def 'new-owner (calldataload 0x24))

          ;; Transfer ownership by storing passed-in address.
          (sstore (+ (get-record node) owner) new-owner)

          ;; Emit an event about the transfer.
          (log2 new-owner 32
              (sha3 0x00 (lit 0x00 "Transfer(bytes32,address)")) node)

          ;; Nothing to return.
          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Transfers ownership of a subnode to a new address. May only be
      ;;         called by the current owner of the node.
      ;; @dev setSubnodeOwner(bytes32,bytes32,address)
      ;; @param node The parent node.
      ;; @param label The hash of the label specifying the subnode.
      ;; @param new-owner The address of the new owner.

      (when (= function-id set-subnode-owner)
        (seq (only-owner (calldataload 0x04))

          ;; Define input parameters to this function.
          (def 'node (calldataload 0x04))
          (def 'label (calldataload 0x24))
          (def 'new-owner (calldataload 0x44))

          ;; Transfer ownership by storing passed-in address.
          (sstore (+ (get-record node label) owner) new-owner)

          ;; Emit an event about the transfer.
          (log3 new-owner 32
              (sha3 0x00 (lit 0x00 "NewOwner(bytes32,bytes32,address)"))
              node label)

          ;; Nothing to return.
          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Sets the resolver address for the specified node.
      ;; @dev setResolver(bytes32,address)
      ;; @param node The node to update.
      ;; @param new-resolver The address of the resolver.

      (when (= function-id set-node-resolver)
        (seq (only-owner (calldataload 0x04))

          ;; Define input parameters to this function.
          (def 'node (calldataload 0x04))
          (def 'new-resolver (calldataload 0x24))

          ;; Transfer ownership by storing passed-in address.
          (sstore (+ (get-record node) resolver) new-resolver)

          ;; Emit an event about the change of resolver.
          (log2 new-resolver 32
              (sha3 0x00 (lit 0x00 "NewResolver(bytes32,address)")) node)

          ;; Nothing to return.
          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Fallback: No functions matched the function ID provided.

      (jump invalid-location)))

)
