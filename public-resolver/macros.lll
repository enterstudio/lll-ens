;;; ---------------------------------------------------------------------------
;;; @title Macros for the public resolver.
;;; @author Daniel Ellison <daniel@syrinx.net>

(seq

  ;; --------------------------------------------------------------------------
  ;; Constant definitions.

  ;; Required standard library version.
  (def 'required-stdlib "0.1.1")

  ;; Storage layout.
  (def 'ens-registry 0x00) ; Address of ens registry.

  ;; Mapping storage address.
  (def 'addresses 0x4210e5b5) ; Short keccak-256 hash of 'addresses'.

  ;; Precomputed function IDs.
  (def 'has-record-type  0x41b9dc2b) ; has(bytes32,bytes32)
  (def 'get-node-address 0x3b3b57de) ; addr(bytes32)
  (def 'set-node-address 0xd5fa2b00) ; setAddr(bytes32,address)
  (def 'get-node-owner   0x02571be3) ; owner(bytes32)

  ;; --------------------------------------------------------------------------
  ;; @notice Returns any address for node passed in.
  ;; @param node Return the address for this node.

  (def 'get-address (node)
    (sload (+ addresses node)))

  ;; --------------------------------------------------------------------------
  ;; @notice Stores the address for the node passed in.
  ;; @param node Set the address for this node.
  ;; @param addr The address to set.

  (def 'set-address (node addr)
    (sstore (+ addresses node) addr))

  ;; --------------------------------------------------------------------------
  ;; @notice Checks that the caller is the node owner.

  (def 'only-node-owner (node)
    (seq

      ;; Call owner(bytes32).
      (mstore return-code (call1 @@ens-registry get-node-owner node 32))

      ;; If the call failed or the caller isn't the current node owner,
      ;; throw an exception.
      (when (|| (= @return-code false) (!= @return-data (caller)))
        (jump invalid-location))))

)
