;;; ---------------------------------------------------------------------------
;;; @title Macros for the ENS registry.
;;; @author Daniel Ellison <daniel@syrinx.net>

(seq

  ;; --------------------------------------------------------------------------
  ;; Constant definitions.

  ;; Memory (0x00 is used by logging).
  (def 'node-bytes  0x20)
  (def 'label-bytes 0x40)
  (def 'call-result 0x60)

  ;; Storage.
  (def 'contract-owner 0x00)

  ;; Precomputed function IDs.
  (def 'ens-registry      0x19a17468) ; ENS(address)
  (def 'get-node-owner    0x02571be3) ; owner(bytes32)
  (def 'get-node-resolver 0x0178b8bf) ; resolver(bytes32)
  (def 'set-node-owner    0x5b0fc9c3) ; setOwner(bytes32,address)
  (def 'set-subnode-owner 0x06ab5923) ; setSubnodeOwner(bytes32,bytes32,address)
  (def 'set-node-resolver 0x1896f70a) ; setResolver(bytes32,address)

  ;; Records storage location: web3.sha3("Record")
  (def 'records 0xbac32db01d928d44eeb2a5dc819058fdfd1c75eadd7631e0a46e4a5a709fddbb)

  ;; Record offsets.
  (def 'owner    0x00) ; owner offset into node record
  (def 'resolver 0x20) ; resolver offset into node record

  ;; Jumping here causes an EVM error.
  (def 'invalid-location 0x02)

  ;; --------------------------------------------------------------------------
  ;; @notice Extracts the four leftmost bytes of input.
  ;; @param input A long number

  (def 'bytes4 (input)
    (div input (exp 2 224)))

  ;; --------------------------------------------------------------------------
  ;; @notice Retrieves the requested function ID from the first four bytes of
  ;; the call data.

  (def 'function-id
    (bytes4 (calldataload 0x00)))

  ;; --------------------------------------------------------------------------
  ;; @notice Calculates record location for node passed in.
  ;; @param node Return the record location of this node.

  (def 'get-record (node)
      (+ records node))

  ;; --------------------------------------------------------------------------
  ;; @notice Calculates record location for node and label passed in.
  ;; @param node The parent node.
  ;; @param label The hash of the subnode label.

  (def 'get-record (node label)
    (seq
      (mstore node-bytes node)
      (mstore label-bytes label)
      (+ records (sha3 node-bytes 64))))

  ;; --------------------------------------------------------------------------
  ;; @notice Retrieves owner from node record.
  ;; @param node Get owner of this node.

  (def 'get-owner (node)
    (sload (+ (get-record node) owner)))

  ;; --------------------------------------------------------------------------
  ;; @notice Retrieves resolver from node record.
  ;; @param node Get resolver of this node.

  (def 'get-resolver (node)
    (sload (+ (get-record node) resolver)))

  ;; --------------------------------------------------------------------------
  ;; @notice Checks that the caller is the contract owner.
  
  (def 'only-owner
    (when (!= (caller) @@contract-owner)
      (jump invalid-location)))

  ;; --------------------------------------------------------------------------
  ;; @notice Checks that the caller is the node owner.
  ;; @param node Check owner of this node.

  (def 'only-owner (node)
    (when (!= (caller) (get-owner node))
      (jump invalid-location)))

)
